#!/usr/bin/env php
<?php
/**
 * Copyright Â© 2011 Online Buddies, Inc. - All Rights Reserved
 *
 * @package Modyllic
 * @author bturner@online-buddies.com
 */

if ($lib_path = getenv("MODYLLIC_LIB_PATH")) set_include_path($lib_path.":".get_include_path());

require_once "Modyllic/CommandLine.php";

$args = Modyllic_CommandLine::get_args(array(
    'description' => 'Colorize SQL from a file or standard input',
    'arguments' => array(
        'filename' => array('optional'=>true) )));

$filename = $args->args['filename'];

if ( $filename == "" ) {
    $filename = "php://stdin";
}

try {
    $sql = file_get_contents($filename);

    $sql = preg_replace('/\r/','',$sql);
    $tok = new Modyllic_Tokenizer($sql);
    $tok->set_delimiter( ';' );
    $color = CLEAR();
    print $color;
    while ( !$tok->next(true) instanceOf Modyllic_Token_EOF ) {
        if ( $tok->cur instanceOf Modyllic_Token_Reserved ) {
            $newcolor = BRIGHT_RED();
        }
        else if ( $tok->cur instanceOf Modyllic_Token_Num ) {
            $newcolor = BRIGHT_CYAN();
        }
        else if ( $tok->cur instanceOf Modyllic_Token_String ) {
            $newcolor = CYAN();
        }
        else if ( $tok->cur instanceOf Modyllic_Token_Symbol ) {
            $newcolor = BRIGHT_RED();
        }
        else if ( $tok->cur instanceOf Modyllic_Token_Ident and ! $tok->cur instanceOf Modyllic_Token_Ident_Quoted and
                  Modyllic_SQL::is_reserved($tok->cur->value()) ) {
            $newcolor = BRIGHT_RED();
        }
        else if ( $tok->cur instanceOf Modyllic_Token_Comment ) {
            $newcolor = GREEN();
        }
        else if ( $tok->cur instanceOf Modyllic_Token_Delim ) {
            $newcolor = BRIGHT_WHITE();
        }
        else if ( $tok->cur instanceOf Modyllic_Token_Error ) {
            $newcolor = RED();
        }
        else {
            $newcolor = CLEAR();
        }
        if ( $color != $newcolor ) {
            if ( $color != CLEAR() and $newcolor != CLEAR() ) {
                print CLEAR();
            }
            print $newcolor;
            $color = $newcolor;
        }
        $lines = explode("\n",$tok->cur->literal());
        print array_shift($lines);
        if (count($lines)) {
            foreach ($lines as $line) {
                if ($color != CLEAR() ) {
                    print CLEAR()."\n".$color;
                }
                else {
                    print "\n";
                }
                print $line;
            }
        }
    }
    if ( $color != CLEAR() ) {
        print CLEAR();
    }

}
catch (Exception $e) {
    Modyllic_CommandLine::display_error($e->getMessage());
}

function CLEAR() { return chr(27).'[0m'; }
function BLACK() { return chr(27).'[0;30m'; }
function RED() { return chr(27).'[0;31m'; }
function GREEN() { return chr(27).'[0;32m'; }
function YELLOW() { return chr(27).'[0;33m'; }
function BLUE() { return chr(27).'[0;34m'; }
function MAGENTA() { return chr(27).'[0;35m'; }
function CYAN() { return chr(27).'[0;36m'; }
function WHITE() { return chr(27).'[0;37m'; }
function BRIGHT_BLACK() { return chr(27).'[1;30m'; }
function BRIGHT_RED() { return chr(27).'[1;31m'; }
function BRIGHT_GREEN() { return chr(27).'[1;32m'; }
function BRIGHT_YELLOW() { return chr(27).'[1;33m'; }
function BRIGHT_BLUE() { return chr(27).'[1;34m'; }
function BRIGHT_MAGENTA() { return chr(27).'[1;35m'; }
function BRIGHT_CYAN() { return chr(27).'[1;36m'; }
function BRIGHT_WHITE() { return chr(27).'[1;37m'; }

